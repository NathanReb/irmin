// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Char = require("bs-platform/lib/js/char.js");
var Block = require("bs-platform/lib/js/block.js");
var Bytes = require("bs-platform/lib/js/bytes.js");
var Curry = require("bs-platform/lib/js/curry.js");
var Format = require("bs-platform/lib/js/format.js");
var $$String = require("bs-platform/lib/js/string.js");
var Caml_bytes = require("bs-platform/lib/js/caml_bytes.js");
var Pervasives = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");
var Caml_js_exceptions = require("bs-platform/lib/js/caml_js_exceptions.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

function invalid_arg(fmt) {
  return Format.ksprintf(Pervasives.invalid_arg, fmt);
}

function Make(D) {
  var to_hex = function (hash) {
    var res = Caml_bytes.caml_create_bytes((D.digest_size << 1));
    var chr = function (x) {
      if (x > 9 || x < 0) {
        return Char.chr(97 + (x - 10 | 0) | 0);
      } else {
        return Char.chr(48 + x | 0);
      }
    };
    for(var i = 0 ,i_finish = D.digest_size - 1 | 0; i <= i_finish; ++i){
      var v = Caml_string.get(hash, i);
      res[(i << 1)] = chr((v >>> 4));
      res[(i << 1) + 1 | 0] = chr(v & 15);
    }
    return Bytes.unsafe_to_string(res);
  };
  var code = function (x) {
    if (x >= 65) {
      if (x >= 97) {
        if (x < 103) {
          return (x - /* "a" */97 | 0) + 10 | 0;
        }
        
      } else if (x < 71) {
        return (x - /* "A" */65 | 0) + 10 | 0;
      }
      
    } else if (!(x > 57 || x < 48)) {
      return x - /* "0" */48 | 0;
    }
    return Curry._1(Format.ksprintf(Pervasives.invalid_arg, /* Format */[
                    /* String_literal */Block.__(11, [
                        "of_hex: ",
                        /* Int */Block.__(4, [
                            /* Int_X */8,
                            /* Lit_padding */Block.__(0, [
                                /* Zeros */2,
                                2
                              ]),
                            /* No_precision */0,
                            /* End_of_format */0
                          ])
                      ]),
                    "of_hex: %02X"
                  ]), x);
  };
  var decode = function (chr1, chr2) {
    return Char.chr((code(chr1) << 4) | code(chr2));
  };
  var of_hex = function (hex) {
    var offset = /* record */[/* contents */0];
    var go = function (have_first, idx) {
      while(true) {
        if ((offset[0] + idx | 0) >= hex.length) {
          return /* "\000" */0;
        } else {
          var chr2 = Caml_string.get(hex, offset[0] + idx | 0);
          var switcher = chr2 - 9 | 0;
          if (switcher > 4 || switcher < 0) {
            if (switcher === 23) {
              offset[0] = offset[0] + 1 | 0;
              continue ;
            }
            
          } else if (!(switcher === 3 || switcher === 2)) {
            offset[0] = offset[0] + 1 | 0;
            continue ;
          }
          if (have_first) {
            return chr2;
          } else {
            offset[0] = offset[0] + 1 | 0;
            var chr2$1 = go(true, idx);
            if (chr2$1 !== /* "\000" */0) {
              return decode(chr2, chr2$1);
            } else {
              return Format.ksprintf(Pervasives.invalid_arg, /* Format */[
                          /* String_literal */Block.__(11, [
                              "of_hex: odd number of hex characters",
                              /* End_of_format */0
                            ]),
                          "of_hex: odd number of hex characters"
                        ]);
            }
          }
        }
      };
    };
    return $$String.init(D.digest_size, (function (param) {
                  return go(false, param);
                }));
  };
  var of_hex_opt = function (hex) {
    var digest;
    try {
      digest = of_hex(hex);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        return ;
      } else {
        throw exn;
      }
    }
    return digest;
  };
  var consistent_of_hex = function (str) {
    var offset = /* record */[/* contents */0];
    var go = function (have_first, idx) {
      while(true) {
        if ((offset[0] + idx | 0) >= str.length) {
          return Format.ksprintf(Pervasives.invalid_arg, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Not enough hex value",
                          /* End_of_format */0
                        ]),
                      "Not enough hex value"
                    ]);
        } else {
          var chr2 = Caml_string.get(str, offset[0] + idx | 0);
          var switcher = chr2 - 9 | 0;
          if (switcher > 4 || switcher < 0) {
            if (switcher === 23) {
              offset[0] = offset[0] + 1 | 0;
              continue ;
            }
            
          } else if (!(switcher === 3 || switcher === 2)) {
            offset[0] = offset[0] + 1 | 0;
            continue ;
          }
          if (have_first) {
            return chr2;
          } else {
            offset[0] = offset[0] + 1 | 0;
            var chr2$1 = go(true, idx);
            return decode(chr2, chr2$1);
          }
        }
      };
    };
    var res = $$String.init(D.digest_size, (function (param) {
            return go(false, param);
          }));
    var is_wsp = function (param) {
      var switcher = param - 9 | 0;
      if (switcher > 4 || switcher < 0) {
        return switcher === 23;
      } else {
        return !(switcher === 3 || switcher === 2);
      }
    };
    while((D.digest_size + offset[0] | 0) < str.length && is_wsp(Caml_string.get(str, offset[0] + (D.digest_size << 1) | 0))) {
      offset[0] = offset[0] + 1 | 0;
    };
    if ((offset[0] + D.digest_size | 0) === str.length) {
      return res;
    } else {
      return Curry._2(Format.ksprintf(Pervasives.invalid_arg, /* Format */[
                      /* String_literal */Block.__(11, [
                          "Too much enough bytes (reach: ",
                          /* Int */Block.__(4, [
                              /* Int_d */0,
                              /* No_padding */0,
                              /* No_precision */0,
                              /* String_literal */Block.__(11, [
                                  ", expect: ",
                                  /* Int */Block.__(4, [
                                      /* Int_d */0,
                                      /* No_padding */0,
                                      /* No_precision */0,
                                      /* Char_literal */Block.__(12, [
                                          /* ")" */41,
                                          /* End_of_format */0
                                        ])
                                    ])
                                ])
                            ])
                        ]),
                      "Too much enough bytes (reach: %d, expect: %d)"
                    ]), offset[0] + (D.digest_size << 1) | 0, str.length);
    }
  };
  var consistent_of_hex_opt = function (hex) {
    var digest;
    try {
      digest = consistent_of_hex(hex);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        return ;
      } else {
        throw exn;
      }
    }
    return digest;
  };
  var pp = function (ppf, hash) {
    for(var i = 0 ,i_finish = D.digest_size - 1 | 0; i <= i_finish; ++i){
      Curry._1(Format.fprintf(ppf, /* Format */[
                /* Int */Block.__(4, [
                    /* Int_x */6,
                    /* Lit_padding */Block.__(0, [
                        /* Zeros */2,
                        2
                      ]),
                    /* No_precision */0,
                    /* End_of_format */0
                  ]),
                "%02x"
              ]), Caml_string.get(hash, i));
    }
    return /* () */0;
  };
  var of_raw_string = function (x) {
    if (x.length !== D.digest_size) {
      return Format.ksprintf(Pervasives.invalid_arg, /* Format */[
                  /* String_literal */Block.__(11, [
                      "invalid hash size",
                      /* End_of_format */0
                    ]),
                  "invalid hash size"
                ]);
    } else {
      return x;
    }
  };
  var of_raw_string_opt = function (x) {
    var digest;
    try {
      digest = of_raw_string(x);
    }
    catch (raw_exn){
      var exn = Caml_js_exceptions.internalToOCamlException(raw_exn);
      if (exn[0] === Caml_builtin_exceptions.invalid_argument) {
        return ;
      } else {
        throw exn;
      }
    }
    return digest;
  };
  var to_raw_string = function (x) {
    return x;
  };
  return {
          to_hex: to_hex,
          code: code,
          decode: decode,
          of_hex: of_hex,
          of_hex_opt: of_hex_opt,
          consistent_of_hex: consistent_of_hex,
          consistent_of_hex_opt: consistent_of_hex_opt,
          pp: pp,
          of_raw_string: of_raw_string,
          of_raw_string_opt: of_raw_string_opt,
          to_raw_string: to_raw_string
        };
}

exports.invalid_arg = invalid_arg;
exports.Make = Make;
/* Format Not a pure module */
